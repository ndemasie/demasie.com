---
export interface Props {
  class?: string
  name: string
  alt: string
  required: boolean
  value: string | number
  options: { name: string, value: string | number }[]
  onChange?: Function | string
  prependIcon?: string
}

const {
  name,
  alt,
  required,
  value,
  options,
  onChange,
  prependIcon
} = Astro.props as Props

const prependIconUrl = `url(${prependIcon})`
---

<label
  class:list={[Astro.props.class, "select", {required}, prependIcon && 'prepend-icon']}
  {alt}
>
  <select {name} tabindex="0" {required} {onChange}>
    {options.map((opt) =>
      <option value={opt.value} selected={opt.value === value}>{opt.name}</option>
    )}
  </select>
  {prependIcon && <span class="prepend-icon"></span>}
  <ul class="select-options" aria-hidden>
    {options
    .filter((opt) => opt.value !== value)
    .map((opt) =>
      <li class="select-option ripple" data-value={opt.value}>{opt.name}</li>
    )}
  </ul>
</label>

<style lang="scss" define:vars={{ prependIconUrl }}>
  @import '../styles/abstracts/variables.scss';
  @import '../styles/abstracts/mixins.scss';

  .select {
    font-size: 1.2rem;
    display: inline-block;

    @include md {
      font-style: 1.4rem;
    }
  }

  .select.prepend-icon > .prepend-icon {
    background: currentColor;
    mask: var(--prependIconUrl);
  }
</style>