name: Build and Deploy CI/CD for EC2

on:
  # push:
  #   branches: [ main ]
  # workflow_dispatch:

jobs:
  deploy_ec2:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    environment:
      name: github-pages

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
            ssh-private-key: "${{ secrets.SSH_PRIVATE_KEY }}"

      - name: Update known_hosts key
        run: |
          ssh-keyscan -H ${{ secrets.AWS_EC2_PUBLIC_DNS }} >> ~/.ssh/known_hosts

      - name: Teardown
        run: |
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} '
            if [ -f ./docker-compose.prod.yaml ]; then
              docker compose --file ./docker-compose.prod.yaml down --rmi all &&
              docker system prune --force
            fi
            '

      - name: Build and tag docker images
        run: |
          get_images() {
            docker images --format "{{.Repository}} {{.ID}} {{.Tag}}" | grep '^demasie-'
          }

          # ENV
          export CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}

          # Build Images
          docker compose --file ./docker-compose.prod.yaml build
          get_images

          # Load each image to EC2
          get_images |
          while read -r image_repo image_id image_tag; do
            docker save ${image_id} \
              | bzip2 \
              | ssh -o "ServerAliveInterval 120" ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} docker load

            ssh -o "ServerAliveInterval 120" ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} "docker tag ${image_id} ${image_repo}:${image_tag}"  < /dev/null
          done

      - name: Copy build files
        run: |
          scp ./docker-compose.prod.yaml ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }}:./

      - name: Run
        run: |
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} '
            export CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}
            docker compose --file ./docker-compose.prod.yaml up --detach
            '