---
import PageLayout from 'src/layouts/PageLayout.astro'
import { Language } from 'src/types/Language'
import { Page } from 'src/types/Page'
import { t } from 'src/locales'

export function getStaticPaths() {
  return Object.values(Language).map((lang) => ({ params: { lang } }))
}

type Params = Awaited<ReturnType<typeof getStaticPaths>>[number]['params']

const { lang } = Astro.params as unknown as Params

const page = Page.Home
---

<PageLayout page={page} lang={lang}>
  <nav id="container">
    <ul>
      <li class="nav-item">
        <h1 class="nav-title">{t('page.app._title', lang)}</h1>

        <!-- <a class="node-link" href={`/${lang}/app`}></a> -->

        <div class="node-media">
          <picture>
            <source
              srcset="/img/aitor-fernandez-red-planatir.png"
              type="img/png"
            />
            <img src="/img/aitor-fernandez-red-planatir.png" />
          </picture>
        </div>

        <ul class="node-sub-menu">
          <li class="node-sub-item">
            <div class="node-sub-item-container">
              <a href={`/${lang}/app/fish-chase`}
                >{t('app.fishChase.name', lang)}</a
              >
            </div>
          </li>
          <li class="node-sub-item">
            <div class="node-sub-item-container">
              <a href={`/${lang}/app`}>{t('common.more', lang)}</a>
            </div>
          </li>
        </ul>
      </li>

      <li class="nav-item">
        <h1 class="nav-title">{t('page.tutorial._title', lang)}</h1>

        <!-- <a class="node-link" href={`/${lang}/tutorial`}></a> -->

        <div class="node-media">
          <picture>
            <source
              srcset="/img/aitor-fernandez-green-planatir.png"
              type="img/png"
            />
            <img src="/img/aitor-fernandez-green-planatir.png" />
          </picture>
        </div>

        <ul class="node-sub-menu">
          <li class="node-sub-item">
            <div class="node-sub-item-container">
              <a href={`/${lang}/tutorial/i18next`}
                >{t('tutorial.i18next.name', lang)}</a
              >
            </div>
          </li>
          <li class="node-sub-item">
            <div class="node-sub-item-container">
              <a href={`/${lang}/tutorial`}>{t('common.more', lang)}</a>
            </div>
          </li>
        </ul>
      </li>
    </ul>
  </nav>
</PageLayout>

<style lang="scss" is:global>
  @import 'src/styles/abstracts/_mixins/_index.scss';

  @mixin flex-center() {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  @mixin full() {
    width: 100%;
    height: 100%;
  }

  @mixin center-absolute() {
    top: 50%;
    left: 50%;
    translate: -50% -50%;
  }

  body {
    height: 100%;
    max-height: 100%;
    padding: 0;
  }

  a {
    text-decoration: none;
  }

  main {
    position: relative;
    height: 100%;
    width: 100%;
    max-width: 100%;
  }

  .nav-item {
    @include flex-center();
    list-style: none;
    position: absolute;
    top: 0;
    left: 0;
    height: 200px;
    width: 200px;

    border-radius: 50%;
    box-shadow: 4px 4px 10px 4px rgba(0, 0, 0, 0.4);

    &::before {
      content: '';
      position: absolute;
      top: 10px;
      left: -16px;
      width: 90%;
      height: 90%;
      border-radius: 50%;
      background: radial-gradient(
        circle at 58% 20px,
        #d7dde7,
        rgba(68, 17, 17, 0) 34%
      );
      filter: blur(12px);
      transform: skewX(-25deg);
      z-index: 2;
    }

    &:after {
      @include full();
      content: '';
      border-radius: 50%;

      position: absolute;
      left: 0;
      top: 0;
      background-image: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0.4),
        rgba(0, 0, 0, 0) 60%,
        rgba(0, 0, 0, 0) 40%,
        rgba(0, 0, 0, 0.4) 100%
      );
    }
    &:hover::before {
      background: none;
    }
    &:hover::after {
      background-color: rgba(0, 0, 0, 0.4);
    }
  }

  .nav-title {
    color: white;
    margin: 1em;
    text-shadow: 0 0 10px black;
  }

  .node-sub-menu {
    counter-reset: item;
    display: inline-block;
    list-style: none;
    padding: 0;
    z-index: -10;
  }

  .node-sub-item {
    @include nth-child-var-index(6);
    @include center-absolute();

    --angle: calc(var(--nth-child, 1) * -40deg + 130deg);
    --radius: 40px;
    --duration: 250ms;

    position: absolute;
    list-style: none;
    height: 120px;
    width: 120px;
    padding: 20px;

    transition-property: translate;
    transition-duration: var(--duration);
    transition-timing-function: cubic-bezier(0.28, 1.1, 0.54, 1.05);
    transition-delay: var(--delay, 0);
    translate: calc(cos(var(--angle, 0deg)) * var(--radius) - 50%)
      calc(sin(var(--angle, 0deg)) * -1 * var(--radius) - 50%);
  }

  .nav-item:hover .node-sub-item {
    --duration: 500ms;
    --delay: calc((var(--nth-child, 1) - 1) * 100ms);
    --radius: 150px;
  }

  .node-sub-item-container {
    @include flex-center();
    position: relative;
    height: 100%;

    &:hover {
      @include border-circle();
      &::before {
        transform: rotate(48deg);
        border-radius: 50%;
      }
    }
  }

  .node-link {
    @include full();
    position: absolute;
    z-index: 50;
  }

  .node-media {
    @include full();
    position: absolute;
    z-index: -1;

    img,
    video {
      @include full();
      clip-path: circle();
      object-fit: cover;
    }

    img {
      @include animate-rotate();
      animation: rotation 22s cubic-bezier(0.8, 0.54, 0.61, 0.84) infinite;
    }
  }

  .nav-item:nth-of-type(1) .node-media picture > img {
    animation-delay: -3.75s;
  }
  .nav-item:nth-of-type(1) .node-media picture > img {
    animation-delay: -5.73s;
  }
</style>

<!-- Import D3 -->
<script>
  import * as d3 from 'd3'

  document.addEventListener('DOMContentLoaded', () => {
    const main = document.querySelector('main')!
    const itemWidth = 200
    const width = (main.clientWidth - itemWidth) / 2
    const height = (main.clientHeight - 80 - itemWidth) / 2
    const isNarrow = main.clientWidth < 400

    const nodes = [
      { id: 'app', link: '/app' },
      { id: 'tutorial', link: '/tutorial' },
    ]

    const links = d3.selectAll('.nav-item')

    const rotate = () => {
      nodes.forEach((d) => {
        const angle = Math.atan2(d.y - height, d.x - width)
        const targetX =
          width + (Math.cos(angle + 0.1) * itemWidth) / (isNarrow ? 1.6 : 1)
        const targetY =
          height + (Math.sin(angle + 0.1) * itemWidth) / (isNarrow ? 1.6 : 1)

        d.vx = (targetX - d.x) * 0.02
        d.vy = (targetY - d.y) * 0.02
      })
    }

    const tick = () => {
      links.data(nodes).style('translate', (d) => `${d.x}px ${d.y}px`)
    }

    const restart = () => {
      simulation.alpha(1).restart()
    }

    const simulation = d3
      .forceSimulation(nodes)
      .force('collide', d3.forceCollide().radius(itemWidth))
      .force('charge', d3.forceManyBody().strength(1))
      .force('center', d3.forceCenter(width, height))
      .force('nodes', d3.forceManyBody())
      .force('rotate', rotate)
      .alphaDecay(0.05)
      .on('tick', tick)

    let interval = d3.interval(restart, 980)

    const dragStart = (event, d) => {
      simulation.alphaTarget(0.5).restart()
      d.fx = event.x
      d.fy = event.y
    }

    const drag = (event, d) => {
      d.fx += event.dx
      d.fy += event.dy
    }

    const dragEnd = (event, d) => {
      simulation.alphaTarget(0).restart()
      d.fx = null
      d.fy = null
    }

    links
      .data(nodes)
      .call(
        d3.drag().on('start', dragStart).on('drag', drag).on('end', dragEnd),
      )
      .on('mouseover', () => {
        simulation.stop()
        interval.stop()
      })
      .on('mouseout', () => {
        simulation.alpha(1).restart()
        interval = d3.interval(restart, 980)
      })
  })
</script>
