name: Build and Deploy CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy_site:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    environment:
      name: github-pages

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build site
        run: bash ./scripts/build.sh --file ./docker/build/Dockerfile.site

      - name: Deploy site
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

  deploy_server:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    environment:
      name: github-pages

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
            ssh-private-key: "${{ secrets.SSH_PRIVATE_KEY }}"

      - name: Update known_hosts key
        run: |
          ssh-keyscan -H ${{ secrets.AWS_EC2_PUBLIC_DNS }} >> ~/.ssh/known_hosts

      - name: Clean instance
        run: |
          # EC2 Docker maintenance
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} docker ps --all --quiet | ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} xargs -r docker stop
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} docker system prune --force

      - name: Load docker image and run
        run: |
          # Prep
          docker image build --file "./docker/build/Dockerfile.server" --tag websocket-server --force-rm .
          image_id=$(docker images --format "{{.ID}} {{.CreatedAt}}" | sort --reverse --key 2 | awk 'NR==1{print $1}')

          # Copy image to EC2
          docker save $image_id \
          | bzip2 \
          | ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} docker load

          # Run Image
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} docker run --detach --publish 80:3001 --publish 443:3001 $image_id