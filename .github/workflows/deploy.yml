name: Build and Deploy CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy_site:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      name: github-pages
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build site
        run: bash ./scripts/build.sh --file ./docker/build/Dockerfile.site --build-arg SECRET_AWS_EC2_PUBLIC_DNS=${{ secrets.AWS_EC2_PUBLIC_DNS }}

      - name: Deploy site
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

  deploy_server:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      name: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create SSH key
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_EC2_PUBLIC_DNS }} >> ~/.ssh/known_hosts

      - name: Load docker image and run
        run: |
          # Prep
          docker image build --file "./docker/build/Dockerfile.server" --tag "websocket-server" --force-rm .
          image_id=$(docker images --format "{{.ID}} {{.CreatedAt}}" | sort --reverse --key 2 | awk 'NR==1{print $1}')

          # EC2 Docker maintenance
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} docker container prune
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} docker image prune
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} docker stop $(docker ps -all --quiet)

          # Copy image to EC2
          docker save $image_id \
          | bzip2 \
          | ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} docker load

          # Run Image
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} docker run $image_id