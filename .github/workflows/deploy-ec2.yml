name: Build and Deploy CI/CD for EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy_ec2:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    environment:
      name: github-pages

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
            ssh-private-key: "${{ secrets.SSH_PRIVATE_KEY }}"

      - name: Update known_hosts key
        run: |
          ssh-keyscan -H ${{ secrets.AWS_EC2_PUBLIC_DNS }} >> ~/.ssh/known_hosts

      - name: Clean up
        run: |
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} '
            docker compose --file ./docker-compose.prod.yaml stop &&
            docker system prune --force &&
            docker images --quiet | xargs -r docker rmi
            '

      - name: Load docker image and run
        run: |
          get_images() {
            docker images --format "{{.ID}} {{.Repository}} {{.CreatedAt}}" \
              | sort --reverse --key 3 \
              | head -n 3
          }

          # Prep
          docker compose --file ./docker-compose.prod.yaml build
          get_images

          # Load each image to EC2
          get_images |
          while read -r image_id image_repo image_create_at; do
            docker save ${image_id} \
              | bzip2 \
              | ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} docker load \
              | ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} "docker tag ${image_id} ${image_repo}:latest"
          done

      - name: Copy build files
        run: |
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} "mkdir -p ./apps/nginx/"
          scp ./apps/nginx/nginx.conf ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }}:./apps/nginx/
          scp ./docker-compose.prod.yaml ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }}:./

      - name: Run
        run: |
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_DNS }} '
            docker compose --file ./docker-compose.prod.yaml up --detach
            '